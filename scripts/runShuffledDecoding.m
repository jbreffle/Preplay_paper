% runShuffledDecoding.m
%
% Similar to varyDecodeParam.m
% This script runs decoding on a single parameter point of a simulation
% result generated by simulateParameterGrid.m.
% At the selected parameter point, it randomly shuffles cell identity,
% either within clusters or independently of clusters, then runs the
% decoding. It does this for multiple replicates.


%% Choose which simulation result to run shuffled decoding on

decodeFileID = "mainPaperGrid";


%% Set up and load data

myPlotSettings

addpath(fullfile("..", "src"))
Config = utils.setConfig;
dataPath = Config.simDataPath;

% Load parameters and results
decodeName = grid.getDecodeFilename(decodeFileID);
[modelParam, ...
    simParam, ...
    resultsStruct, ...
    PFresultsStruct, ...
    preplayGridSpikes, ...
    pfGridspikes ...
    ] = grid.loadResults(decodeName);


%% Analysis parameters

analysisParam.ithSimParam1 = 2;
analysisParam.ithSimParam2 = 3;
analysisParam.nReplicates = 25;	% Number of times to repeate each decoding analysis
analysisParam.nWorkers = 4;     % Number of parfor workers
analysisParam.baseSeed = 1234;
analysisParam.shuffleMethod = 'singleClusterCells'; % "none", "withinCluster", "clusterIndependent", "singleClusterCells"

analysisParam.saveResults = true;

% Temp, for testing/debugging
%analysisParam.nReplicates = 2
%analysisParam.nWorkers = 1
%paramOverride.shuffleIterations = 2


%% paramOverride

% These are needed to shuffle cell identity within run_param_decode()
paramOverride.shuffledCellDecode = true;
paramOverride.decodeCellShuffle = analysisParam.shuffleMethod;


%% Set up for analysis

param1Val = simParam.variedParam(1).range(analysisParam.ithSimParam1);
disp(['Param1=', num2str(analysisParam.ithSimParam1), ': ', simParam.variedParam(1).name, '=', num2str(param1Val)])
param2Val = simParam.variedParam(2).range(analysisParam.ithSimParam2);
disp(['Param2=', num2str(analysisParam.ithSimParam2), ': ', simParam.variedParam(2).name, '=', num2str(param2Val)])
linearParamInd = find(all([param1Val; param2Val] == simParam.parameterSets_vec, 1));

PFSpikeTimes_paramPoint = pfGridspikes{linearParamInd};
preplaySpikeTimes_paramPoint = preplayGridSpikes{linearParamInd};
clear preplayGridSpikes pfGridspikes

analysisParam.decodeFileID = decodeFileID;
tmp = split(decodeName, 'decode');
analysisParam.simName = tmp{1};

[~, analysisParam.git_hash_string] = system('git rev-parse HEAD');
analysisParam.running_file = mfilename('fullpath');

[param1IndVec, ~] = find([simParam.variedParam(1).range==simParam.parameterSets_vec(1,:)']');
[param2IndVec, ~] = find([simParam.variedParam(2).range==simParam.parameterSets_vec(2,:)']');
allParamSetInds = [param1IndVec, param2IndVec];
assert( isequal(allParamSetInds(linearParamInd,:), [analysisParam.ithSimParam1, analysisParam.ithSimParam2]) )

decode_data_path = fullfile(dataPath, analysisParam.simName);


%% Starts parallel pool if needed
if analysisParam.nWorkers>1
    disp(['Starting parpool with ', num2str(analysisParam.nWorkers), ' workers'])
    if isempty(gcp('nocreate')) % create parpool if there isn't one
        parpool(analysisParam.nWorkers);
    end
    current_par_pool = gcp('nocreate');
    if current_par_pool.NumWorkers~=analysisParam.nWorkers
        delete(gcp('nocreate'))
        parpool(analysisParam.nWorkers); % Create parpool if current one has wrong NumWorkers
    end
else
    disp('Using single worker')
end


%% Perform decoding, looping over replicates

% Initialize the main output structures of the analysis
PFresultsStruct_variedDecode = struct;
resultsStruct_variedDecode = struct;

tic
% Loop over random replicates of the analysis
if analysisParam.nWorkers==1
    % Use a regular for-loop, to enable debugging
    for ithReplicate = 1:analysisParam.nReplicates
        disp(['Starting decode shuffle replicate ', num2str(ithReplicate)])
        replicateSeed = analysisParam.baseSeed*ithReplicate;
        [PFresults, allResults] = run_param_decode( ...
            PFSpikeTimes_paramPoint, ...
            preplaySpikeTimes_paramPoint, ...
            decode_data_path, ...
            allParamSetInds, ...
            linearParamInd, ...
            plotInterimResults=false, ...
            paramOverride=paramOverride, ...
            mainSeed=replicateSeed ...
            );
        PFresultsStruct_variedDecode(ithReplicate).net = PFresults;
        resultsStruct_variedDecode(ithReplicate).net = allResults;
    end
else
    % Use a parfor-loop if analysisParam.nWorkers>1
    parfor ithReplicate = 1:analysisParam.nReplicates
        disp(['Starting decode shuffle replicate ', num2str(ithReplicate)])
        replicateSeed = analysisParam.baseSeed*ithReplicate;
        [PFresults, allResults] = run_param_decode( ...
            PFSpikeTimes_paramPoint, ...
            preplaySpikeTimes_paramPoint, ...
            decode_data_path, ...
            allParamSetInds, ...
            linearParamInd, ...
            plotInterimResults=false, ...
            paramOverride=paramOverride, ...
            mainSeed=replicateSeed ...
            );

        PFresultsStruct_variedDecode(ithReplicate).net = PFresults;
        resultsStruct_variedDecode(ithReplicate).net = allResults;
    end
end
runTime = toc;
disp(['Runtime: ', num2str(runTime/60), ' min'])


%% Save

if analysisParam.saveResults

    % Remove un-necessary fields that are too large
    resultsStruct_variedDecode = utils.removeExtraDecodeStructFields( ...
        resultsStruct_variedDecode, removePmat=false, removeRanksVec=false ...
        );

    % Save results
    fileName = [analysisParam.simName, 'shuffledDecode', datestr(now,'yyyy-mm-ddTHH-MM')];
    save_path = fullfile(dataPath, analysisParam.simName, fileName);
    save(save_path, 'PFresultsStruct_variedDecode', 'resultsStruct_variedDecode', 'analysisParam', 'modelParam', 'runTime', 'paramOverride')

    disp(['Saved file ', fileName])
else
    disp('DID NOT SAVE RESULTS')
end

